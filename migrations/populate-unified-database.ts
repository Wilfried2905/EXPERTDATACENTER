import { db } from '../server/db'
import { 
  unifiedCategories, 
  unifiedServices, 
  unifiedDeliverables,
  type NewUnifiedCategory,
  type NewUnifiedService,
  type NewUnifiedDeliverable
} from '../shared/unified-schema'
import { templates } from '../shared/schema'
import { sql } from 'drizzle-orm'

// ===== EXTRACTION COMPL√àTE DU CATEGORYDATA =====
const categoryData = {
  survey: {
    nom: "SURVEY",
    color: "#3B82F6",
    description: "Module autonome pour les √©valuations et √©tudes techniques",
    services: [
      "√âvaluation d'infrastructure",
      "√âtudes de localisation", 
      "√âtude de Faisabilit√©",
      "√âtude de R√©silience",
      "Optimisation √ânerg√©tique",
      "√âvaluations Sp√©cialis√©es",
      "√âtudes Comparatives",
      "Audit de capacit√©",
      "√âvaluation environnementale",
      "√âvaluations de centres de donn√©es p√©riph√©riques (Edge & ¬µEDC)",
      "√âvaluations haute densit√© (AI/ML Computing)",
      "√âvaluations de refroidissement par immersion"
    ]
  },
  audit: {
    nom: "AUDIT", 
    color: "#10B981",
    description: "Module autonome pour la conformit√© et certifications",
    services: [
      "Conformit√© et certification",
      "Audit documentaire",
      "√âvaluations p√©riodiques",
      "S√©curit√© physique",
      "Pr√©paration certification",
      "Analyse des √©carts",
      "Audit de conformit√© TIA-942",
      "Audit de redondance",
      "√âvaluation des performances",
      "Audit de durabilit√© √©nerg√©tique",
      "Audit de syst√®mes modulaires",
      "Audit de technologies √©mergentes"
    ]
  },
  conseil: {
    nom: "CONSEIL",
    color: "#F59E0B", 
    description: "Module autonome pour la strat√©gie et planification",
    services: [
      "Strat√©gie et planification",
      "Transformation infrastructure",
      "Formation TIA-942",
      "Optimisation op√©rationnelle",
      "Gestion des risques",
      "Optimisation √©nerg√©tique",
      "Planification de la croissance",
      "Conseil en refroidissement liquide",
      "Strat√©gie infrastructure Edge",
      "Transition √©nerg√©tique"
    ]
  },
  amoa: {
    nom: "AMOA",
    color: "#EC4899",
    description: "Module autonome pour l'assistance ma√Ætrise d'ouvrage",
    services: [
      "Architecture Technique Infrastructure",
      "Conception technique",
      "Conception g√©n√©rale",
      "Pilotage et planification",
      "√âtude pr√©liminaire",
      "Analyse des besoins",
      "Sp√©cifications techniques d√©taill√©es",
      "Validation des livrables",
      "Sp√©cifications Edge Computing",
      "Analyse besoins haute densit√©",
      "Cahier des charges durabilit√©"
    ]
  },
  support: {
    nom: "SUPPORT",
    color: "#8B5CF6",
    description: "Module autonome pour la production et transfert",
    services: [
      "Production documentaire",
      "Transfert de comp√©tences", 
      "Suivi des recommandations",
      "Gestion de la documentation",
      "Accompagnement Projet",
      "Support Op√©rationnel",
      "Assistance Technique",
      "Formation Technologies √âmergentes",
      "Accompagnement transition Edge",
      "Support durabilit√©"
    ]
  },
  amenagement: {
    nom: "AMENAGEMENT PHYSIQUE",
    color: "#06B6D4", 
    description: "Module autonome pour l'infrastructure physique",
    services: [
      "Urbanisation des salles",
      "Distribution √©lectrique",
      "Infrastructure r√©seau",
      "Optimisation √©nerg√©tique",
      "Documentation op√©rationnelle",
      "Syst√®mes de refroidissement (CVC)",
      "Syst√®mes de s√©curit√©",
      "Syst√®mes de d√©tection incendie",
      "C√¢blage structur√©",
      "Refroidissement direct-sur-puce (D2C)",
      "Syst√®mes de refroidissement par immersion",
      "Architecture Wall Flow",
      "Micro-r√©seaux √©lectriques"
    ]
  },
  "amenagement-technique": {
    nom: "AM√âNAGEMENT TECHNIQUE",
    color: "#6366F1",
    description: "Module autonome pour la conception sp√©cialis√©e",
    services: [
      "Conception technique",
      "Conception g√©n√©rale", 
      "Pilotage et planification",
      "√âtude pr√©liminaire",
      "Conception haute densit√©",
      "Edge computing",
      "Conception durable et √©cologique"
    ]
  },
  nettoyage: {
    nom: "NETTOYAGE",
    color: "#059669",
    description: "Module autonome pour la maintenance propret√©",
    services: [
      "Planification des interventions",
      "M√©thodologie et protocoles",
      "Assurance qualit√©",
      "Documentation et rapports",
      "Gestion des prestataires",
      "Nettoyage syst√®mes immersion",
      "Maintenance circuits liquides",
      "Nettoyage environnements haute densit√©"
    ]
  },
  commissioning: {
    nom: "COMMISSIONING",
    color: "#F59E0B",
    description: "Module autonome pour les tests et validation",
    services: [
      "Tests de mise en service",
      "Validation des performances",
      "Tests de redondance",
      "Certification finale",
      "Documentation de mise en service",
      "Mise en service refroidissement liquide",
      "Validation haute densit√©",
      "Tests Edge computing"
    ]
  },
  maintenance: {
    nom: "MAINTENANCE",
    color: "#EC4899",
    description: "Module autonome pour la gestion pr√©ventive",
    services: [
      "Maintenance Pr√©ventive",
      "Maintenance Corrective",
      "Maintenance Pr√©dictive",
      "Gestion des Contrats de Maintenance",
      "Planification des Interventions",
      "Maintenance Syst√®mes Liquides",
      "Maintenance Batteries Lithium-Ion",
      "Maintenance Pr√©dictive IA"
    ]
  },
  monitoring: {
    nom: "MONITORING",
    color: "#14B8A6",
    description: "Module autonome pour la surveillance continue",
    services: [
      "Surveillance des performances",
      "Alertes et notifications",
      "Rapports de performance",
      "Analyse des tendances",
      "Optimisation continue",
      "Surveillance haute densit√©",
      "Monitoring Edge temps r√©el",
      "Analyse √©nerg√©tique avanc√©e"
    ]
  }
}

interface MigrationReport {
  categoriesCreated: number
  servicesCreated: number
  deliverablesLinked: number
  orphanedDeliverables: string[]
  errors: string[]
  duration: number
}

class UnifiedSystemMigration {
  
  async executeFullMigration(): Promise<MigrationReport> {
    const startTime = Date.now()
    console.log('üöÄ D√©but de la migration vers le syst√®me unifi√©')
    
    const report: MigrationReport = {
      categoriesCreated: 0,
      servicesCreated: 0,
      deliverablesLinked: 0,
      orphanedDeliverables: [],
      errors: [],
      duration: 0
    }

    try {
      // ===== 1. V√âRIFICATION PR√âALABLE =====
      await this.performPreMigrationChecks(report)
      
      // ===== 2. CR√âATION DES CAT√âGORIES =====
      const categoryMap = await this.migrateCategories(report)
      
      // ===== 3. CR√âATION DES SERVICES =====
      const serviceMap = await this.migrateServices(categoryMap, report)
      
      // ===== 4. MIGRATION DES LIVRABLES =====
      await this.migrateDeliverables(serviceMap, report)
      
      // ===== 5. STATISTIQUES FINALES =====
      await this.printFinalStats(report)
      
      report.duration = Date.now() - startTime
      
      console.log('‚úÖ Migration termin√©e avec succ√®s')
      this.printMigrationReport(report)
      
      return report
      
    } catch (error) {
      report.errors.push(`Erreur critique: ${error.message}`)
      report.duration = Date.now() - startTime
      
      console.error('‚ùå √âchec de la migration:', error)
      throw error
    }
  }

  // ===== V√âRIFICATIONS PR√âALABLES =====
  private async performPreMigrationChecks(report: MigrationReport) {
    console.log('üîç V√©rifications pr√©alables...')
    
    // V√©rifier que les nouvelles tables sont vides
    const existingCategories = await db.select().from(unifiedCategories)
    const existingServices = await db.select().from(unifiedServices)
    const existingDeliverables = await db.select().from(unifiedDeliverables)
    
    if (existingCategories.length > 0 || existingServices.length > 0 || existingDeliverables.length > 0) {
      throw new Error('Les tables unifi√©es ne sont pas vides. Videz-les avant la migration.')
    }

    // V√©rifier les donn√©es sources
    const oldTemplates = await db.select().from(templates)
    
    console.log(`üìä Donn√©es trouv√©es:`)
    console.log(`   - Templates existants: ${oldTemplates.length}`)
    console.log(`   - Cat√©gories dans categoryData: ${Object.keys(categoryData).length}`)
    
    // Calculer services total dans categoryData
    const totalCategoryServices = Object.values(categoryData)
      .reduce((sum, cat) => sum + cat.services.length, 0)
    
    console.log(`   - Services dans categoryData: ${totalCategoryServices}`)
    
    if (totalCategoryServices !== 107) {
      console.warn(`‚ö†Ô∏è Attention: ${totalCategoryServices} services dans categoryData, attendu 107`)
    }
  }

  // ===== MIGRATION DES CAT√âGORIES =====
  private async migrateCategories(report: MigrationReport): Promise<Map<string, number>> {
    console.log('üìÅ Migration des cat√©gories...')
    
    const categoryInserts: NewUnifiedCategory[] = []
    let ordre = 1
    
    for (const [key, category] of Object.entries(categoryData)) {
      categoryInserts.push({
        nom: category.nom,
        color: category.color,
        description: category.description,
        ordre: ordre++,
        isActive: true
      })
    }
    
    const insertedCategories = await db
      .insert(unifiedCategories)
      .values(categoryInserts)
      .returning()
    
    report.categoriesCreated = insertedCategories.length
    
    // Cr√©er map nom -> id pour les services
    const categoryMap = new Map<string, number>()
    insertedCategories.forEach(cat => {
      categoryMap.set(cat.nom, cat.id)
    })
    
    console.log(`‚úÖ ${insertedCategories.length} cat√©gories cr√©√©es`)
    return categoryMap
  }

  // ===== MIGRATION DES SERVICES =====
  private async migrateServices(
    categoryMap: Map<string, number>, 
    report: MigrationReport
  ): Promise<Map<string, number>> {
    console.log('üîß Migration des services...')
    
    const serviceInserts: NewUnifiedService[] = []
    const serviceMap = new Map<string, number>()
    let ordre = 1
    
    for (const [key, category] of Object.entries(categoryData)) {
      const categoryId = categoryMap.get(category.nom)
      if (!categoryId) {
        report.errors.push(`Cat√©gorie non trouv√©e: ${category.nom}`)
        continue
      }
      
      for (const serviceName of category.services) {
        const serviceData: NewUnifiedService = {
          categoryId,
          nom: serviceName,
          description: this.generateServiceDescription(serviceName, category.nom),
          workflow: this.generateServiceWorkflow(category.nom),
          dureeEstimee: this.estimateServiceDuration(serviceName),
          prerequis: [],
          ordre: ordre++,
          isActive: true
        }
        
        serviceInserts.push(serviceData)
      }
    }
    
    const insertedServices = await db
      .insert(unifiedServices)
      .values(serviceInserts)
      .returning()
    
    report.servicesCreated = insertedServices.length
    
    // Cr√©er map nom -> id pour les livrables
    insertedServices.forEach(service => {
      serviceMap.set(service.nom, service.id)
    })
    
    console.log(`‚úÖ ${insertedServices.length} services cr√©√©s`)
    
    return serviceMap
  }

  // ===== MIGRATION DES LIVRABLES =====
  private async migrateDeliverables(
    serviceMap: Map<string, number>,
    report: MigrationReport
  ) {
    console.log('üìã Migration des livrables...')
    
    // R√©cup√©rer tous les templates existants
    const existingTemplates = await db.select().from(templates)
    console.log(`üìä ${existingTemplates.length} templates √† migrer`)
    
    const deliverableInserts: NewUnifiedDeliverable[] = []
    let ordre = 1
    
    for (const template of existingTemplates) {
      // Trouver le service correspondant via sous_categorie
      const serviceId = serviceMap.get(template.sous_categorie || '')
      
      if (serviceId) {
        deliverableInserts.push({
          serviceId,
          nom: template.nom,
          structure: template.structure,
          prompts: template.prompts,
          variables: template.variables,
          metadonnees: template.metadonnees,
          description: template.description,
          ordre: ordre++,
          isActive: template.is_active ?? true
        })
        report.deliverablesLinked++
      } else {
        // Livrable orphelin - service non trouv√©
        report.orphanedDeliverables.push(
          `${template.nom} (categorie: ${template.categorie}, sous_categorie: ${template.sous_categorie})`
        )
        console.warn(`‚ö†Ô∏è Service non trouv√© pour: ${template.nom} -> ${template.sous_categorie}`)
      }
    }
    
    if (deliverableInserts.length > 0) {
      const insertedDeliverables = await db
        .insert(unifiedDeliverables)
        .values(deliverableInserts)
        .returning()
      
      console.log(`‚úÖ ${insertedDeliverables.length} livrables migr√©s`)
    }
    
    if (report.orphanedDeliverables.length > 0) {
      console.warn(`‚ö†Ô∏è ${report.orphanedDeliverables.length} livrables orphelins`)
    }
  }

  // ===== STATISTIQUES FINALES =====
  private async printFinalStats(report: MigrationReport) {
    console.log('üìä Statistiques finales...')
    
    const [categoriesCount] = await db
      .select({ count: sql<number>`count(*)` })
      .from(unifiedCategories)
    
    const [servicesCount] = await db
      .select({ count: sql<number>`count(*)` })
      .from(unifiedServices)
    
    const [deliverablesCount] = await db
      .select({ count: sql<number>`count(*)` })
      .from(unifiedDeliverables)
    
    console.log('üìà R√©sultats:')
    console.log(`   - Cat√©gories: ${categoriesCount.count}`)
    console.log(`   - Services: ${servicesCount.count}`)
    console.log(`   - Livrables: ${deliverablesCount.count}`)
  }

  // ===== FONCTIONS UTILITAIRES =====
  private generateServiceDescription(serviceName: string, categoryName: string): string {
    return `Service ${serviceName} du module ${categoryName}. Description g√©n√©r√©e automatiquement lors de la migration vers le syst√®me unifi√©.`
  }

  private generateServiceWorkflow(categoryName: string): any {
    const baseWorkflow = {
      etapes: [
        { nom: "Analyse des besoins", duree: "1-2 jours" },
        { nom: "Collecte d'informations", duree: "2-3 jours" },
        { nom: "√âlaboration", duree: "3-5 jours" },
        { nom: "Validation", duree: "1 jour" },
        { nom: "Livraison", duree: "1 jour" }
      ],
      outils: ["Documentation technique", "Standards TIA-942"],
      validations: ["Contr√¥le qualit√©", "Validation client"]
    }
    
    return baseWorkflow
  }

  private estimateServiceDuration(serviceName: string): string {
    const complexityKeywords = ['√©tude', 'analyse', 'audit', 'conception', 'design']
    const isComplex = complexityKeywords.some(keyword => 
      serviceName.toLowerCase().includes(keyword)
    )
    
    return isComplex ? "5-10 jours" : "2-5 jours"
  }

  private printMigrationReport(report: MigrationReport) {
    console.log('\nüìã RAPPORT DE MIGRATION:')
    console.log(`‚úÖ Cat√©gories cr√©√©es: ${report.categoriesCreated}`)
    console.log(`‚úÖ Services cr√©√©s: ${report.servicesCreated}`)
    console.log(`‚úÖ Livrables li√©s: ${report.deliverablesLinked}`)
    console.log(`‚ö†Ô∏è Livrables orphelins: ${report.orphanedDeliverables.length}`)
    console.log(`‚ùå Erreurs: ${report.errors.length}`)
    console.log(`‚è±Ô∏è Dur√©e: ${Math.round(report.duration / 1000)}s`)
    
    if (report.errors.length > 0) {
      console.log('\n‚ùå ERREURS D√âTAILL√âES:')
      report.errors.forEach(error => console.log(`   - ${error}`))
    }
    
    if (report.orphanedDeliverables.length > 0) {
      console.log('\n‚ö†Ô∏è LIVRABLES ORPHELINS:')
      report.orphanedDeliverables.slice(0, 10).forEach(deliverable => {
        console.log(`   - ${deliverable}`)
      })
      if (report.orphanedDeliverables.length > 10) {
        console.log(`   ... et ${report.orphanedDeliverables.length - 10} autres`)
      }
    }
  }
}

// ===== EX√âCUTION SI SCRIPT DIRECT =====
// D√©tection si ce fichier est ex√©cut√© directement
const isMainModule = import.meta.url === `file://${process.argv[1]}`

if (isMainModule) {
  const migration = new UnifiedSystemMigration()
  migration.executeFullMigration()
    .then(stats => {
      console.log('‚úÖ Migration termin√©e avec succ√®s:', stats)
      process.exit(0)
    })
    .catch(error => {
      console.error('‚ùå √âchec de la migration:', error)
      process.exit(1)
    })
}

export { UnifiedSystemMigration }